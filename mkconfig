#! /usr/bin/env bash

shopt -s extglob

mkrepos() {
   local base="$HOME"/github
   mkdir -p "$base"

   for repo in bash config help scripts vim; do
      if cd "$base" && [[ ! -d $repo ]]; then
         if git clone git@github.com:kurkale6ka/"$repo".git; then
            if [[ $repo == @(bash|vim) ]]
            then cd "$repo" && git submodule init && git submodule update
            fi
            # No newline for the last one
            [[ ! $repo == vim ]] && echo
         fi
      fi
   done

   # tags generation
   cd "$base" &&
   ctags -R --langmap=vim:+.vimrc,sh:+.bashrc.bash_profile                       \
   --exclude=*~ --exclude=.*~ --exclude=bundle --exclude=colors --exclude=keymap \
   --exclude=pathogen.vim                                                        \
   "$base"/bash/scripts                                                          \
   "$base"/bash/.bashrc                                                          \
   "$base"/scripts                                                               \
   "$base"/vim                                                                   \
   "$base"/vim/bundle/vsearch                                                    \
   "$base"/vim/bundle/_my/blanklines                                             \
   "$base"/vim/bundle/_my/blockinsert                                            \
   "$base"/vim/bundle/_my/pairs                                                  \
   "$base"/vim/bundle/_my/sequence                                               \
   "$base"/vim/bundle/_my/swap
   # "$base"/vim/bundle/_my/desertEx
   # "$base"/vim/bundle/_my/chess
}

updaterepos() {
   for repo in bash config help scripts vim; do
      if cd "$HOME/github/$repo"; then
         if git pull git@github.com:kurkale6ka/"$repo".git master; then
            if [[ $repo == @(bash|vim) ]]
            then git submodule sync >/dev/null && git submodule update
            fi
            # No newline for the last one
            [[ ! $repo == vim ]] && echo
         fi
      fi
   done
}

cprepos() {
   cd "$HOME"/github || exit 1

   if wget --no-check-certificate \
      https://github.com/kurkale6ka/bash/tarball/master
   then
      wget --no-check-certificate \
         https://github.com/kurkale6ka/bash-cd/tarball/master
   fi

   wget --no-check-certificate                             \
      https://github.com/kurkale6ka/config/tarball/master  \
      https://github.com/kurkale6ka/help/tarball/master    \
      https://github.com/kurkale6ka/scripts/tarball/master

   if wget --no-check-certificate \
      https://github.com/kurkale6ka/vim/tarball/master
   then
      wget --no-check-certificate                                     \
         https://github.com/kurkale6ka/vim-blanklines/tarball/master  \
         https://github.com/kurkale6ka/vim-blockinsert/tarball/master \
         https://github.com/kurkale6ka/vim-quotes/tarball/master      \
         https://github.com/kurkale6ka/vim-sequence/tarball/master    \
         https://github.com/kurkale6ka/vim-swap/tarball/master        \
         https://github.com/godlygeek/csapprox/tarball/master         \
         https://github.com/godlygeek/tabular/tarball/master          \
         https://github.com/tpope/vim-pathogen/tarball/master         \
         https://github.com/tpope/vim-abolish/tarball/master          \
         https://github.com/tpope/vim-endwise/tarball/master          \
         https://github.com/tpope/vim-unimpaired/tarball/master       \
         https://github.com/tpope/vim-surround/tarball/master         \
         https://github.com/tpope/vim-repeat/tarball/master           \
         https://github.com/tpope/vim-ragtag/tarball/master           \
         https://github.com/tpope/vim-flatfoot/tarball/master         \
         https://github.com/scrooloose/nerdcommenter/tarball/master   \
         https://github.com/vim-scripts/MarkLines/tarball/master      \
         https://github.com/vim-scripts/bufkill.vim/tarball/master    \
         https://github.com/rodjek/vim-puppet/tarball/master          \
         https://github.com/vim-scripts/UltiSnips/tarball/master
   fi
   for repo in master*; do
      # Use tar with -C <dir> ...?
      tar zxvf "$repo" && command rm "$repo"
   done
}

 rcdirs=(bash config help scripts vim)
    rcs=(.dir_colors .gitignore .{input,irb,screen,top}rc .Xresources)
 vimrcs=(.{,g,n,gn}vimrc)
bashrcs=(.profile .bash_{profile,login,logout} .bashrc .logout)
 bashxs=(terminal_colors.bash em mkconfig host_to_sshconfig.bash mssh)

mklinks() {
   local base="$HOME"/github

   # Same as in ${parameter#word to remove} or ${parameter%word to remove},
   # # <=> \< and % <=> \>, so ${rcdir/#/$base/} means replace the
   # beginning of rcdir with $base/
   for rcdir in "${rcdirs[@]}"
   do ln -sT "${rcdir/#/$base/}" "${rcdir/#/$HOME/}"
   done

   ln -sT "$base"/vim "$HOME"/.vim
   ln -sT "$base"/vim "$HOME"/.nvim

   ln -s "${rcs[@]/#/$base/config/dotfiles/}" \
      "${vimrcs[@]/#/$base/vim/}"             \
     "${bashrcs[@]/#/$base/bash/}"            \
     "$base"/bash/scripts/cd/.cdmarks.skel "$HOME"

   mkdir -p "$HOME"/bin
   if [[ -d $HOME/bin ]]; then
      ln -s "${bashxs[@]/#/$base/scripts/}" \
            "$base"/vim/scripts/vc "$HOME"/bin
   fi
}

rmlinks() {
   command \
      rm "$HOME"/{.cdmarks.skel,.vim,.nvim,bin/vc} \
          "${rcdirs[@]/#/$HOME/}"                  \
             "${rcs[@]/#/$HOME/}"                  \
          "${vimrcs[@]/#/$HOME/}"                  \
         "${bashrcs[@]/#/$HOME/}"                  \
          "${bashxs[@]/#/$HOME/bin/}"
}

mkenv() {
   mkrepos; mklinks

   # Put in @sets ?
   emerge bind-tools     \
          evince         \
          figlet         \
          gcalctool      \
          # dev-vcs/git -gtk
          git            \
          gnupg          \
          moreutils      \
          ntp            \
          # sys-process/parallel \ ?
          sudo           \
          tcpdump        \
          vixie-cron     \
          wgetpaste      \
          x11-misc/xclip
   # rc-update add ntpd vixie-cron default

   # visudo
   # Defaults:mitko timestamp_timeout=50 # min before asking for password again

   mkdir -p "$HOME"/backups
   # crontab -u "$USER" "$HOME"/rc/crontab/crontab.backups
}

 options=('Update repositories' 'Create repositories' 'Copy repositories')
options+=('Make links'          'Remove links'        'Machine setup')

select choice in "${options[@]}"
do
   case "$choice" in
      "${options[0]}") updaterepos;      break;;
      "${options[1]}") mkrepos; mklinks; break;;
      "${options[2]}") cprepos;          break;;
      "${options[3]}") mklinks;          break;;
      "${options[4]}") rmlinks;          break;;
      "${options[5]}") mkenv;            break;;
                    *) echo '*** Wrong choice ***' >&2
   esac
done
