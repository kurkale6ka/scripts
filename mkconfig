#! /usr/bin/env bash

shopt -s extglob

mkrepos() {
   mkdir -p "$HOME"/github

   for repo in bash config help scripts vim; do
      if cd "$HOME"/github && [[ ! -d $repo ]]; then
         if git clone git@github.com:kurkale6ka/"$repo".git; then
            if [[ $repo == @(bash|vim) ]]
            then cd "$repo" && git submodule init && git submodule update
            fi
            # No newline for the last one
            [[ ! $repo == vim ]] && echo
         fi
      fi
   done
   mktags
}

mktags() {
   local base="$HOME"/github

   cd "$base" &&
   ctags -R                                       \
   --langmap=vim:+.vimrc,sh:+.bashrc.bashrc_after \
   --exclude=*~                                   \
   --exclude=.*~                                  \
   --exclude=bundle                               \
   --exclude=colors                               \
   --exclude=keymap                               \
   --exclude=pathogen.vim                         \
   "$HOME"/.bashrc_after                          \
   "$base"/bash/.bashrc                           \
   "$base"/bash/scripts                           \
   "$base"/scripts                                \
   "$base"/vim                                    \
   "$base"/vim/bundle/vsearch                     \
   "$base"/vim/bundle/_my/blanklines              \
   "$base"/vim/bundle/_my/blockinsert             \
   "$base"/vim/bundle/_my/pairs                   \
   "$base"/vim/bundle/_my/sequence                \
   "$base"/vim/bundle/_my/swap
   # "$base"/vim/bundle/_my/desertEx
   # "$base"/vim/bundle/_my/chess
}

updaterepos() {
   for repo in bash config help scripts vim; do
      if cd "$HOME/github/$repo"; then
         if git pull git@github.com:kurkale6ka/"$repo".git master; then
            if [[ $repo == @(bash|vim) ]]
            then git submodule sync >/dev/null && git submodule update
            fi
            # No newline for the last one
            [[ ! $repo == vim ]] && echo
         fi
      fi
   done
}

cprepos() {
   cd "$HOME"/github || exit 1

   if wget --no-check-certificate \
      https://github.com/kurkale6ka/bash/tarball/master
   then
      wget --no-check-certificate \
         https://github.com/kurkale6ka/bash-cd/tarball/master
   fi

   wget --no-check-certificate                             \
      https://github.com/kurkale6ka/config/tarball/master  \
      https://github.com/kurkale6ka/help/tarball/master    \
      https://github.com/kurkale6ka/scripts/tarball/master

   if wget --no-check-certificate \
      https://github.com/kurkale6ka/vim/tarball/master
   then
      wget --no-check-certificate                                     \
         https://github.com/kurkale6ka/vim-blanklines/tarball/master  \
         https://github.com/kurkale6ka/vim-blockinsert/tarball/master \
         https://github.com/kurkale6ka/vim-quotes/tarball/master      \
         https://github.com/kurkale6ka/vim-sequence/tarball/master    \
         https://github.com/kurkale6ka/vim-swap/tarball/master        \
         https://github.com/godlygeek/csapprox/tarball/master         \
         https://github.com/godlygeek/tabular/tarball/master          \
         https://github.com/tpope/vim-pathogen/tarball/master         \
         https://github.com/tpope/vim-abolish/tarball/master          \
         https://github.com/tpope/vim-endwise/tarball/master          \
         https://github.com/tpope/vim-unimpaired/tarball/master       \
         https://github.com/tpope/vim-surround/tarball/master         \
         https://github.com/tpope/vim-repeat/tarball/master           \
         https://github.com/tpope/vim-ragtag/tarball/master           \
         https://github.com/tpope/vim-flatfoot/tarball/master         \
         https://github.com/scrooloose/nerdcommenter/tarball/master   \
         https://github.com/vim-scripts/MarkLines/tarball/master      \
         https://github.com/vim-scripts/bufkill.vim/tarball/master    \
         https://github.com/rodjek/vim-puppet/tarball/master          \
         https://github.com/vim-scripts/UltiSnips/tarball/master
   fi
   for repo in master*; do
      # Use tar with -C <dir> ...?
      tar zxvf "$repo" && command rm "$repo"
   done
}

# Create/remove symbolic links
  repos=(bash config help scripts vim)
    vim=(.{,g,n}vimrc)
   bash=(.profile .bash_{profile,login,logout} .bashrc .logout)
configs=(.dir_colors .gitignore .{input,irb}rc .Xresources)
   exes=(terminal_colors.bash mkconfig)

mklinks() {
   local base="$HOME"/github

   # Same as in ${parameter#word to remove} or ${parameter%word to remove},
   # # <=> \< and % <=> \>, so ${r/#/$base/} means replace the
   # beginning of r with $base/
   for r in "${repos[@]}"
   do ln -sT "${r/#/$base/}" "${r/#/$HOME/}"
   done

   ln -sT "$base"/vim "$HOME"/.vim
   ln -sT "$base"/vim "$HOME"/.nvim

   ln -s "${configs[@]/#/$base/config/dotfiles/}" \
             "${vim[@]/#/$base/vim/}"             \
            "${bash[@]/#/$base/bash/}"            \
            "$base"/bash/scripts/cd/.cdmarks.skel "$HOME"

   ln -s ~/github/config/tmux/.tmux.conf "$HOME"
   ln -s ~/github/config/ctags/.ctags "$HOME"

   mkdir -p "$HOME"/bin
   if [[ -d $HOME/bin ]]; then
      ln -s "${exes[@]/#/$base/scripts/}" \
            "$base"/vim/scripts/vc "$HOME"/bin

      ln -s ~/github/config/tmux/layout "$HOME"/bin/lay
   fi
}

rmlinks() {
   command \
      rm "$HOME"/{.cdmarks.skel,.ctags,.tmux.conf,.vim,.nvim,bin/vc} \
           "${repos[@]/#/$HOME/}"                                    \
         "${configs[@]/#/$HOME/}"                                    \
             "${vim[@]/#/$HOME/}"                                    \
            "${bash[@]/#/$HOME/}"                                    \
            "${exes[@]/#/$HOME/bin/}"
   command rm ~/bin/lay
}

options[0]='Update repositories'
options[1]='Create repositories'
options[2]='Copy repositories'
options[3]='Generate tags'
options[4]='Make links'
options[5]='Remove links'

select choice in "${options[@]}"
do
   case "$choice" in
      "${options[0]}") updaterepos;      break;;
      "${options[1]}") mkrepos; mklinks; break;;
      "${options[2]}") cprepos;          break;;
      "${options[3]}") mktags;           break;;
      "${options[4]}") mklinks;          break;;
      "${options[5]}") rmlinks;          break;;
                    *) echo '*** Wrong choice ***' >&2
   esac
done

# vim: foldmethod=indent
