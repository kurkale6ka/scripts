#! /usr/bin/env zsh

# run this script with:
# ---------------------
# zsh <(curl -s https://raw.githubusercontent.com/kurkale6ka/scripts/master/mkconfig)
#
# vim-plug (after cloning):
# -------------------------
# curl -fLo ~/github/vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
# :PlugInstall

if [[ -z $REPOS_BASE ]]
then
   print -P '%F{red}REPOS_BASE empty%f' >&2
   read 'REPLY?defaulting to ~/github (change value or enter to accept): '
   REPOS_BASE=${REPLY:-~/github}
   echo
fi

# Don't update my cd bookmarks for automated cds
chpwd_functions=()

initial_setup() {
   if [[ $(uname) == Darwin ]]
   then
      if (( $+commands[brew] ))
      then
         print -P "* %F{45}Installing Homebrew formulae%f..."
         brew install bash
         brew install zsh
         brew install shellcheck
         brew install ed
         brew install gnu-sed
         brew install fd
         brew install findutils
         brew install coreutils
         brew install slhck/moreutils/moreutils --without-parallel
         brew install grep
         brew install ripgrep
         brew install git
         brew install colordiff
         brew install ctags
         brew install dos2unix
         brew install gcal
         brew install bat
         brew install tree
         brew install mariadb
         brew install sqlite
         brew install gawk
         brew install gnu-tar
         brew install tmux
         brew install weechat
         brew install wgetpaste
         brew install iproute2mac
         brew install nmap
         brew install tcpdump
         brew install telnet
         brew install parallel --force
         brew install vim
         brew tap neovim/neovim
         brew install --HEAD neovim

         # Fix Homebrew PATHs
         path=("$(brew --prefix coreutils)"/libexec/gnubin $path)
         typeset -Ug path

         echo
      else
         print -P '%F{red}Please install Homebrew%f' >&2
      fi
   fi

   if (( ! $+commands[git] ))
   then
      print -P '%F{red}Please install git before proceeding!%f' >&2
      exit 1
   fi

   mkdir -p $REPOS_BASE

   if cd $REPOS_BASE
   then
      print -P "* Cloning repositories in %F{69}${REPOS_BASE/$HOME/~}%f ..."
      [[ ! -d zsh     ]] && git clone git@github.com:kurkale6ka/zsh.git
      [[ ! -d bash    ]] && git clone git@github.com:kurkale6ka/bash.git
      [[ ! -d help    ]] && git clone git@github.com:kurkale6ka/help.git
      [[ ! -d config  ]] && git clone git@github.com:kurkale6ka/config.git
      [[ ! -d scripts ]] && git clone git@github.com:kurkale6ka/scripts.git
      [[ ! -d vim     ]] && git clone git@github.com:kurkale6ka/vim.git
   fi

   print -P '* Configuring %F{45}git%f'
   . $REPOS_BASE/config/git.bash


   # XDG setup
   . $REPOS_BASE/zsh/.zshenv
   if [[ ! -f $HOME/.zshenv ]]
   then
      cp $REPOS_BASE/zsh/.zshenv $HOME/.zshenv
   fi

   print -P '* Linking dot files%f'
   links add

   print -P '* Generating tags%f'
   mktags

   print -P '* Creating fuzzy cd database%f'
   . $REPOS_BASE/scripts/mkdb
}

repos() {
   local repo
   for repo in $REPOS_BASE/*(/)
   do
      if cd $repo
      then
         if [[ $1 == status ]]
         then
            if [[ -n $(git status --porcelain) ]] || git status -sb | grep -qE ']$'
            then
               print -nP "%F{45}${repo:t}%f: "
               git status -sb
            fi
         else
            git fetch -q
            if [[ $(git symbolic-ref --short HEAD) == master ]] && git status -sb | grep -q behind
            then
               print -nP "%F{45}${repo:t}%f: "
               git pull
            fi
         fi
      fi
   done
}

mktags() {
   if [[ -z $XDG_CONFIG_HOME ]]
   then
      print -P 'mktags (zsh): %F{red}XDG setup needed%f' >&2
      return 1
   fi

   # Cheat by treating zsh files as sh
   # note: $REPOS_BASE/zsh/autoload can't be added since the function names are 'missing'
   if cd $REPOS_BASE
   then
      ctags -R                                   \
         --langmap=vim:+.vimrc,sh:+.after        \
         --exclude='*~ '                         \
         --exclude='.*~'                         \
         --exclude=plugged                       \
         --exclude=colors                        \
         --exclude=keymap                        \
         --exclude=plug.vim                      \
         $XDG_CONFIG_HOME/zsh                    \
         $REPOS_BASE/scripts                     \
         $REPOS_BASE/vim                         \
         $REPOS_BASE/vim/plugged/vsearch         \
         $REPOS_BASE/vim/plugged/vim-blockinsert \
         $REPOS_BASE/vim/plugged/vim-chess       \
         $REPOS_BASE/vim/plugged/vim-desertEX    \
         $REPOS_BASE/vim/plugged/vim-pairs       \
         $REPOS_BASE/vim/plugged/vim-swap
   fi
}

links() {
   # vim
   if [[ $1 == add ]]
   then
      ln -sfT $REPOS_BASE/vim         ~/.vim
      ln -sf  $REPOS_BASE/vim/.vimrc  ~
      ln -sf  $REPOS_BASE/vim/.gvimrc ~
   else
      'rm' ~/.vim
      'rm' ~/.vimrc
      'rm' ~/.gvimrc
   fi

   if [[ -n $XDG_CONFIG_HOME ]]
   then
      # nvim
      if [[ $1 == add ]]
      then
         ln -sfT $REPOS_BASE/vim $XDG_CONFIG_HOME/nvim
      else
         'rm' $XDG_CONFIG_HOME/nvim
      fi

      # zsh
      if [[ $1 == add ]]
      then
         if mkdir -p {$XDG_CONFIG_HOME,$XDG_DATA_HOME}/zsh
         then
            ln -sf $REPOS_BASE/zsh/.zshenv   ~
            ln -sf $REPOS_BASE/zsh/autoload  $XDG_CONFIG_HOME/zsh
            ln -sf $REPOS_BASE/zsh/.zprofile $XDG_CONFIG_HOME/zsh
            ln -sf $REPOS_BASE/zsh/.zshrc    $XDG_CONFIG_HOME/zsh
         fi
      else
         'rm' ~/.zshenv
         'rm' $XDG_CONFIG_HOME/zsh/autoload
         'rm' $XDG_CONFIG_HOME/zsh/.zprofile
         'rm' $XDG_CONFIG_HOME/zsh/.zshrc
      fi

      # ranger
      if [[ $1 == add ]]
      then
         if mkdir -p $XDG_CONFIG_HOME/ranger
         then
            ln -sf $REPOS_BASE/config/ranger/rc.conf $XDG_CONFIG_HOME/ranger
         fi
      else
         'rm' $XDG_CONFIG_HOME/ranger/rc.conf
      fi
   else
      print -P 'mklinks (nvim, zsh, ranger): %F{red}XDG setup needed%f' >&2
   fi

   local config

   # bash
   for config in .bash_profile .bashrc .bash_logout
   do
      if [[ $1 == add ]]
      then
         ln -sf $REPOS_BASE/bash/$config ~
      else
         'rm' ~/$config
      fi
   done

   # ~/bin
   if [[ $1 == add ]]
   then
      mkdir -p ~/bin
   fi

   for config in mkconfig colors_term.bash colors_tmux.bash
   do
      if [[ $1 == add ]]
      then
         ln -sf -t ~/bin $REPOS_BASE/scripts/$config
      else
         'rm' ~/bin/$config
      fi
   done

   if [[ $1 == add ]]
   then
      ln -sf -t ~/bin $REPOS_BASE/config/tmux/lay
   else
      'rm' ~/bin/lay
   fi

   # misc configs
   for config in .gitignore .irbrc .pyrc .Xresources
   do
      if [[ $1 == add ]]
      then
         ln -sf $REPOS_BASE/config/dotfiles/$config ~
      else
         'rm' ~/$config
      fi
   done

   if [[ $1 == add ]]
   then
      ln -sf $REPOS_BASE/config/ctags/.ctags ~
      ln -sf $REPOS_BASE/config/tmux/.tmux.conf ~
   else
      'rm' ~/.ctags
      'rm' ~/.tmux.conf
   fi
}

# if no arguments, update repositories
if (($# == 0))
then
   echo 'Updating repos...'
   repos update
   exit
fi

local -a switches

# Command line options
while :
do
   case $1 in
      (-h|--help)
         echo 'Usage: mkconfig -isutclL'
         exit
         ;;
      (-i|--ini)
         switches+=(i)
         shift
         ;;
      (-s|--status)
         switches+=(s)
         shift
         ;;
      (-u|--update)
         switches+=(u)
         shift
         ;;
      (-t|--tags)
         switches+=(t)
         shift
         ;;
      (-c|--gen-c-db)
         switches+=(c)
         shift
         ;;
      (-l|--links)
         if [[ $switches[*] != *L* ]]
         then
            switches+=(l)
         fi
         shift
         ;;
      (-L|--del-links)
         if [[ $switches[*] != *l* ]]
         then
            switches+=(L)
         fi
         shift
         ;;
      (-?*)
         print -P "Error: unknown option %F{red}$1%f" >&2
         exit 1
         ;;
      (*)
         break
         ;;
   esac
done

if (($#))
then
   echo 'Non-option arguments not allowed. Usage: mkconfig -isutclL' >&2
   exit 1
fi

# Check repositories statuses
if [[ ${switches[*]} == *s* ]]
then
   repos status
   exit
fi

# Initial setup
if [[ ${switches[*]} == *i* ]]
then
   initial_setup
   exit
fi

# Update repositories
if [[ ${switches[*]} == *u* ]]
then
   repos update
fi

# Generate tags
if [[ ${switches[*]} == *t* ]]
then
   mktags
fi

# Create fuzzy cd database
if [[ ${switches[*]} == *c* ]]
then
   . $REPOS_BASE/scripts/mkdb
fi

# Make/remove links
if [[ ${switches[*]} == *l* ]]
then
   links add
elif [[ ${switches[*]} == *L* ]]
then
   links del
fi

# vim: foldmethod=indent
