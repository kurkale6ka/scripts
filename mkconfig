#! /usr/bin/env zsh

# run this script with:
# ---------------------
# zsh <(curl -s https://raw.githubusercontent.com/kurkale6ka/scripts/master/mkconfig)
#
# vim-plug (after cloning):
# -------------------------
# curl -fLo ~/github/vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
# :PlugInstall

# Usage: mkconfig -isutclL
#
# -i: Initial setup
# -s: Check repositories statuses
# -u: Update repositories
# -t: Generate tags
# -c: Create fuzzy cd database
# -l: Make links
# -L: Remove links

if [[ -z $REPOS_BASE ]]
then
   print -P '%F{red}REPOS_BASE empty%f' >&2
   read 'REPLY?defaulting to ~/github (change value or enter to accept): '
   REPOS_BASE=${REPLY:-~/github}
   echo
fi

# Don't update my cd bookmarks for automated cds
chpwd_functions=()

initial_setup() {
   if [[ $(uname) == Darwin ]]
   then
      if (( $+commands[brew] ))
      then
         print -P '%F{45}*%f Installing Homebrew formulae...\n'

         local -a formulae

         formulae+=(bash)
         formulae+=(zsh)
         formulae+=(shellcheck)
         formulae+=(ed)
         formulae+=(gnu-sed)
         formulae+=(gawk)
         formulae+=(vim)
         formulae+=(fd)
         formulae+=(findutils)
         formulae+=(coreutils)
         formulae+=(grep)
         formulae+=(ripgrep)
         formulae+=(mariadb)
         formulae+=(sqlite)
         formulae+=(colordiff)
         formulae+=(bat)
         formulae+=(git)
         formulae+=(ctags)
         formulae+=(gnu-tar)
         formulae+=(iproute2mac)
         formulae+=(tcpdump)
         formulae+=(telnet)
         formulae+=(tmux)
         formulae+=(weechat)
         formulae+=(tree)
         formulae+=(gcal)
         formulae+=(nmap)
         formulae+=(dos2unix)
         formulae+=(wgetpaste)

         brew install $formulae
         brew install --HEAD neovim
         brew install slhck/moreutils/moreutils --without-parallel
         brew install parallel --force

         # Fix Homebrew PATHs
         path=("$(brew --prefix coreutils)"/libexec/gnubin $path)
         typeset -Ug path

         echo
      else
         print -P '%F{red}Please install Homebrew%f' >&2
      fi
   fi

   if (( ! $+commands[git] ))
   then
      print -P '%F{red}Please install git before proceeding!%f' >&2
      exit 1
   fi

   mkdir -p $REPOS_BASE

   # Clone repos
   if cd $REPOS_BASE
   then
      print -P "%F{45}*%f Cloning repositories in %F{69}${REPOS_BASE/$HOME/~}%f ...\n"
      local repo
      for repo in zsh bash help config scripts vim
      do
         if [[ ! -d $repo ]]
         then
            git clone git@github.com:kurkale6ka/$repo.git
            echo
         fi
      done
   fi

   print -P '%F{45}*%f Configuring git'
   . $REPOS_BASE/config/git.bash


   # XDG setup
   . $REPOS_BASE/zsh/.zshenv

   if [[ ! -f $HOME/.zshenv ]]
   then
      cp $REPOS_BASE/zsh/.zshenv $HOME/.zshenv
   fi

   print -P '%F{45}*%f Linking dot files'
   links add

   print -P '%F{45}*%f Generating tags'
   mktags

   print -P '%F{45}*%f Creating fuzzy cd database'
   . $REPOS_BASE/scripts/db-create
}

repos() {
   local repo
   for repo in $REPOS_BASE/*(/)
   do
      if cd $repo
      then
         if [[ $1 == status ]]
         then
            if [[ -n $(git status --porcelain) ]] || git status -sb | grep -qE ']$'
            then
               print -nP "%F{45}${repo:t}%f: "
               git status -sb
            fi
         else
            git fetch -q
            if [[ $(git symbolic-ref --short HEAD) == master ]] && git status -sb | grep -q behind
            then
               print -nP "%F{45}${repo:t}%f: "
               git pull
            fi
         fi
      fi
   done
}

mktags() {
   if [[ -z $XDG_CONFIG_HOME ]]
   then
      print -P 'mktags (zsh): %F{red}XDG setup needed%f' >&2
      return 1
   fi

   # Cheat by treating zsh files as sh
   # note: $REPOS_BASE/zsh/autoload can't be added since the function names are 'missing'
   if cd $REPOS_BASE
   then
      ctags -R                                   \
         --langmap=vim:+.vimrc,sh:+.after        \
         --exclude='*~ '                         \
         --exclude='.*~'                         \
         --exclude=plugged                       \
         --exclude=colors                        \
         --exclude=keymap                        \
         --exclude=plug.vim                      \
         $XDG_CONFIG_HOME/zsh                    \
         $REPOS_BASE/scripts                     \
         $REPOS_BASE/vim                         \
         $REPOS_BASE/vim/plugged/vsearch         \
         $REPOS_BASE/vim/plugged/vim-blockinsert \
         $REPOS_BASE/vim/plugged/vim-chess       \
         $REPOS_BASE/vim/plugged/vim-desertEX    \
         $REPOS_BASE/vim/plugged/vim-pairs       \
         $REPOS_BASE/vim/plugged/vim-swap
   fi
}

links() {
   # vim
   if [[ $1 == add ]]
   then
      ln -sfT $REPOS_BASE/vim         ~/.vim
      ln -sf  $REPOS_BASE/vim/.vimrc  ~
      ln -sf  $REPOS_BASE/vim/.gvimrc ~
   else
      'rm' ~/.vim
      'rm' ~/.vimrc
      'rm' ~/.gvimrc
   fi

   if [[ -n $XDG_CONFIG_HOME ]]
   then
      # nvim
      if [[ $1 == add ]]
      then
         ln -sfT $REPOS_BASE/vim $XDG_CONFIG_HOME/nvim
      else
         'rm' $XDG_CONFIG_HOME/nvim
      fi

      # zsh
      if [[ $1 == add ]]
      then
         if mkdir -p {$XDG_CONFIG_HOME,$XDG_DATA_HOME}/zsh
         then
            ln -sf $REPOS_BASE/zsh/.zshenv   ~
            ln -sf $REPOS_BASE/zsh/autoload  $XDG_CONFIG_HOME/zsh
            ln -sf $REPOS_BASE/zsh/.zprofile $XDG_CONFIG_HOME/zsh
            ln -sf $REPOS_BASE/zsh/.zshrc    $XDG_CONFIG_HOME/zsh
         fi
      else
         'rm' ~/.zshenv
         'rm' $XDG_CONFIG_HOME/zsh/autoload
         'rm' $XDG_CONFIG_HOME/zsh/.zprofile
         'rm' $XDG_CONFIG_HOME/zsh/.zshrc
      fi

      # ranger
      if [[ $1 == add ]]
      then
         if mkdir -p $XDG_CONFIG_HOME/ranger
         then
            ln -sf $REPOS_BASE/config/ranger/rc.conf $XDG_CONFIG_HOME/ranger
         fi
      else
         'rm' $XDG_CONFIG_HOME/ranger/rc.conf
      fi
   else
      print -P 'links(nvim, zsh, ranger): %F{red}XDG setup needed%f' >&2
   fi

   local config

   # bash
   for config in .bash_profile .bashrc .bash_logout
   do
      if [[ $1 == add ]]
      then
         ln -sf $REPOS_BASE/bash/$config ~
      else
         'rm' ~/$config
      fi
   done

   # ~/bin
   if [[ $1 == add ]]
   then
      mkdir -p ~/bin
   fi

   for config in mkconfig colors_term.bash colors_tmux.bash
   do
      if [[ $1 == add ]]
      then
         ln -sf -t ~/bin $REPOS_BASE/scripts/$config
      else
         'rm' ~/bin/$config
      fi
   done

   if [[ $1 == add ]]
   then
      ln -sf -t ~/bin $REPOS_BASE/config/tmux/lay
   else
      'rm' ~/bin/lay
   fi

   # misc configs
   for config in .gitignore .irbrc .pyrc .Xresources
   do
      if [[ $1 == add ]]
      then
         ln -sf $REPOS_BASE/config/dotfiles/$config ~
      else
         'rm' ~/$config
      fi
   done

   if [[ $1 == add ]]
   then
      ln -sf $REPOS_BASE/config/ctags/.ctags ~
      ln -sf $REPOS_BASE/config/tmux/.tmux.conf ~
   else
      'rm' ~/.ctags
      'rm' ~/.tmux.conf
   fi
}

# if no arguments, update repositories
if (($# == 0))
then
   echo 'Updating repos...'
   repos update
   exit
fi

## Help
_help() {
local info
read -r -d $'\0' info << 'HELP'
Usage: mkconfig -isutclL

-i: Initial setup
-s: Check repositories statuses
-u: Update repositories
-t: Generate tags
-c: Create fuzzy cd database
-l: Make links
-L: Remove links
HELP
if (($1 == 0))
then echo $info
else echo $info >&2
fi
}

local -a switches

# Command line options
while :
do
   case $1 in
      (-h|--help)
         _help 0
         exit
         ;;
      (-i|--ini)
         switches+=(i)
         shift
         ;;
      (-s|--status)
         switches+=(s)
         shift
         ;;
      (-u|--update)
         switches+=(u)
         shift
         ;;
      (-t|--tags)
         switches+=(t)
         shift
         ;;
      (-c|--gen-c-db)
         switches+=(c)
         shift
         ;;
      (-l|--links)
         if [[ $switches[*] != *L* ]]
         then
            switches+=(l)
         fi
         shift
         ;;
      (-L|--del-links)
         if [[ $switches[*] != *l* ]]
         then
            switches+=(L)
         fi
         shift
         ;;
      (-?*)
         print -P "Error: unknown option %F{red}$1%f" >&2
         exit 1
         ;;
      (*)
         break
         ;;
   esac
done

if (($#))
then
   print -P '%F{red}Non-option arguments not allowed%f' >&2
   _help 1
   exit 1
fi

# Check repositories statuses
if [[ ${switches[*]} == *s* ]]
then
   repos status
   exit
fi

# Initial setup
if [[ ${switches[*]} == *i* ]]
then
   initial_setup
   exit
fi

# Update repositories
if [[ ${switches[*]} == *u* ]]
then
   repos update
fi

# Generate tags
if [[ ${switches[*]} == *t* ]]
then
   mktags
fi

# Create fuzzy cd database
if [[ ${switches[*]} == *c* ]]
then
   . $REPOS_BASE/scripts/db-create
fi

# Make/remove links
if [[ ${switches[*]} == *l* ]]
then
   links add
elif [[ ${switches[*]} == *L* ]]
then
   links del
fi

# vim: foldmethod=indent
