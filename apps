#! /usr/bin/python3.5

# Check for running processes of business applications
# Usage:
#    ./apps
#    ./apps [pattern] (matches against both groups and apps)

apps = {}

# proc string, name
apps['group_1'] = ('First group', {
   'proc_1': 'app one',
   'proc_2': 'app two'
})

apps['group_2'] = ('Second group', {
   'proc_3': 'app three',
   'proc_4': 'app four'
})

p_apps = {}
for a in apps:
   p_apps[a] = '|'.join(apps[a][1].keys())

from subprocess import Popen, PIPE

# ps ax o start_time,cmd | grep -vE ... | grep -E 'app1|2|3...'
p1 = Popen(['ps', 'ax', 'o', 'start_time,cmd'],                        stdout=PIPE)
p2 = Popen(['grep', '-vE', 'grep|python3\.5.*apps'],  stdin=p1.stdout, stdout=PIPE)
p3 = Popen(['grep', '-E', '|'.join(p_apps.values())], stdin=p2.stdout, stdout=PIPE)

p1.stdout.close()
p2.stdout.close()

# (STDIN, STDERR)
_in, _err = p3.communicate()

_in = _in.decode('utf-8')

# colors
_grn = '\033[00;32m'
_red = '\033[00;31m'
_blu = '\033[01;38;5;39m'
_ylw = '\033[00;38;5;221m'
_end = '\033[0m'

def status(app, k = None, patt = None):

   print(_blu +apps[app][0]+ _end)

   _res = []

   for a in apps[app][1]:

      if patt and a == k:
         highlight = True
      else:
         highlight = False

      if a in _in:
         _procs_a = [x for x in _in.split('\n') if a in x]
         _times = {l.split()[0] for l in _procs_a}

         # app, nb procs, up/down, highlighted?, start_times
         _res.append((apps[app][1][a], len(_procs_a), True, highlight, _times))
      else:
         _res.append((apps[app][1][a], 0, False, highlight))

   for a in sorted(_res):

      # should the app be highlighted?
      if a[3] == True:
         name = _ylw +a[0]+ _end
      else:
         name = a[0]

      if a[2] == True:
         if len(a[4]) > 1:
            _dates = [_red +_a+ _end for _a in a[4]]
         else:
            _dates = [_grn +_a+ _end for _a in a[4]]

         print('  ', name, _grn +'▲'+ _end, a[1], ', '.join(_dates))
      else:
         print('  ', name, _red +'▼'+ _end)

from sys import argv

if len(argv) == 2:

   import re

   _excluded_keys = ()

   for a in apps:

      # Match against the high level groups (group_1, group_2...)
      if re.search('.*?'.join(x for x in argv[1]), a):
         _excluded_keys += (a,)
         status(a)
         print()

   for a in apps:

      if not a in _excluded_keys:

         for k in apps[a][1].keys():

            # Match against the apps keys and values
            patt = re.search('.*?'.join(x for x in argv[1]), k)
            if not patt:
               patt = re.search('.*?'.join(x for x in argv[1]), apps[a][1][k])

            if patt:
               status(a, k, patt)
               print()
               break
else:
   for a in ['group_1', 'group_2']:
      status(a)
      print()
