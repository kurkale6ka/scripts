#! /usr/bin/env bash

# Remote user(s) creation + installation of public key(s)
#
# Usage:
#    mkuser
#    mkuser /file/with/keys
#           (entries like: key-type AAA... user@domain)

shopt -s extglob

if [[ $1 == -@(h|-h)* ]]
then
   info='Usage: mkuser [/file/with/keys]'
   if (($#))
   then echo "$info"    ; exit 0
   else echo "$info" >&2; exit 1
   fi
fi

b="$(tput bold)"
y="$(printf %s "$b"; tput setaf 3)"
r="$(tput sgr0)"

# Usage: _mkauth sshkey
_mkauth () {

   # key-type AAA... user@domain
   if (($(awk '{print NF}' <<< $1) != 3))
   then
      echo 'Wrong ssh key format. Please use: key-type AAA... user@domain!' 1>&2
      exit 2
   fi

   # Parse ssh key
   local key="$(awk '{print $2}' <<< "$1")"

   local email="$(egrep -o '\S+$' <<< "$1")"

   local login="${email%@*}"

   read -p "The key will be installed under $y${login}$r. Change the user or Enter to accept: "

   [[ $REPLY ]] && login="$REPLY"

   if [[ $login == root ]]
   then local home=/root
   else local home=/home/"$login"
   fi

   # Create user
   if ! grep "$login" /etc/passwd >/dev/null
   then
      IFS= read -p 'Name: (First Last) ' full_name
      useradd -m -s/bin/bash -c"$full_name" "$login"
   elif [[ ! -d $home ]]
   then
      if mkdir -p "$home"
      then
         chown "$login":"$login" "$home"
      fi
   fi

   # Install key
   if mkdir -p "$home"/.ssh
   then
      if ! grep "$key" "$home"/.ssh/authorized_keys 2>/dev/null
      then
         echo "$sshkey" >> "$home"/.ssh/authorized_keys
      fi

      # Change permissions + ownership
      chmod 700 "$home"/.ssh
      chmod 600 "$home"/.ssh/authorized_keys

      chown -R "$login":"$login" "$home"/.ssh
   fi
}

if (($#))
then
   # Without -u3, _mkauth's read would also read from the file vs STDIN
   while IFS= read -r -u3 sshkey
   do
      [[ $sshkey = \#* ]] && continue
      _mkauth "$sshkey"
   done 3< "$1"
else
   IFS= read -p 'Public key: ' sshkey
   _mkauth "$sshkey"
fi
