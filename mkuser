#! /usr/bin/env bash

# User(s) creation + installation of public key(s)
# or
# User removal
#
# Run on the target machine
#
# Usage:
#    mkuser
#    mkuser /file/with/keys
#           ssh-rsa AAAxxx user@domain
#           ...
#    or
#    mkuser -d login
#
# Note: HOMES can be used to define a different root for home directories

shopt -s extglob

## Colors
_bld="$(tput bold)"
_ylw="$(printf %s "$_bld"; tput setaf 3)"
_grn="$(printf %s "$_bld"; tput setaf 2)"
_red="$(printf %s "$_bld"; tput setaf 1)"
_res="$(tput sgr0)"

## Help
_help() {
read -r -d $'\0' info << 'HELP'
Usage:
   mkuser
   mkuser /file/with/keys
          ssh-rsa AAAxxx user@domain
          ...
   or
   mkuser -d login

Note: HOMES can be used to define a different root for home directories
HELP

if (($1 == 0))
then echo "$info"
else echo "$info" >&2
fi

exit "$1"
}

# Sanity checks
if (($# > 2))
then
   echo "${_red}Wrong number of arguments$_res!" >&2
   _help 1
fi

if [[ $1 == -@(h|-h)* ]]
then
   _help 0
fi

# Usage: _mkauth sshkey
_mkauth () {

   ## Key check: type key email
   if (($(awk '{print NF}' <<< $1) != 3))
   then
      echo "${_red}Wrong ssh key format$_res! Please use: type key email." 1>&2
      exit 2
   fi

   ## Parse the ssh key
   local key="$(awk '{print $2}' <<< "$1")"
   local email="$(awk '{print $3}' <<< "$1")"
   local login="${email%@*}"

   local skel=/etc/skel

   if [[ $HOMES && $login != root ]]
   then
      local home="${HOMES%/}"/"$login"

      skel="$HOMES"/skel
   else
      # Set the user's home directory
      if [[ $login == root ]]
      then local home=/root
      else local home=/home/"$login"
      fi
   fi

   read -p "The user's home directory is: $_ylw${home}$_res. Change the value or Enter to accept: "

   if [[ $REPLY ]]
   then
      login="${REPLY##*/}"
      home="$REPLY"
   fi

   ## Create user
   if ! getent passwd "$login"
   then
      IFS= read -p 'First name: ' fname
      IFS= read -p ' Last name: ' lname
      useradd -m -d"$home" -k"$skel" -s/bin/bash -c"$fname $lname" "$login"
   else
      if [[ ! -d $home ]]
      then
         # Create home directory
         if mkdir -p -- "$home"
         then
            # copy skeleton files
            cp -a "$skel"/.[^.]* "$home"

            chown -R "$login":"$login" "$home"
         fi
      fi

      ## Install key
      if mkdir -p -- "$home"/.ssh
      then
         if ! grep -q "$key" "$home"/.ssh/authorized_keys 2>/dev/null
         then
            echo "Installing $_grn$login$_res's ssh key under $home/.ssh/authorized_keys..."
            echo "$sshkey" >> "$home"/.ssh/authorized_keys
         fi

         # Change permissions + ownership
         chmod 700 "$home"/.ssh
         chmod 600 "$home"/.ssh/authorized_keys

         chown -R "$login":"$login" "$home"/.ssh
      fi
   fi
}

## Main

# Add a single user
if (($# == 0))
then
   IFS= read -p 'Public key: ' sshkey
   _mkauth "$sshkey"
# Add several users
elif (($# == 1))
then
   # Without -u3, _mkauth's read would also read from the file vs STDIN
   while IFS= read -r -u3 sshkey
   do
      [[ $sshkey = \#* ]] && continue
      _mkauth "$sshkey"
   done 3< "$1"
# Delete a user
elif (($# == 2))
then
   if [[ $2 == root ]]
   then
      echo "You are not supposed to delete ${_red}root${_res}!" >&2
      exit 3
   fi

   if ! userdel -r "$2"
   then
      if [[ -d $HOMES/$2 ]]
      then
         _home="$HOMES"
      elif [[ -d /home/$2 ]]
      then
         _home=/home
      else
         echo "There is no home directory associated with ${_red}$2${_res}!" >&2
         exit 4
      fi

      echo "Deleting $_home/${_red}$2${_res}..."
      rm -rI --preserve-root -- "$_home"/"$2"
   fi
fi

# vim: fde=getline(v\:lnum)=~'^\\s*##'?'>'.(len(matchstr(getline(v\:lnum),'###*'))-1)\:'='
